# first establish our provider info
provider "aws" {
  region                   = "us-east-1"
  shared_credentials_files = ["~/.aws/credentials"]
  profile                  = "default"
}

#next we'll create our S3 bucket which our IAM group will have access to and use
resource "aws_s3_bucket" "dev_bucket" {
  bucket = "my_dev_bucket_${random_id.bucket_suffix.hex}" #this attribute specifies the name of the bucket we're creating which must be globally
  #unique across ALL AWS accounts. So we name it "my_dev_bucket", and at the end we're adding a string with random hex to ensure uniqueness
  #"my-dev-bucket-${random_id.bucket_suffix.hex}" is using string interpolation to create a bucket name. my-dev-bucket- is a prefix you've chosen
  #${random_id.bucket_suffix.hex} appends a random hex value generated by another Terraform resource.
  tags = {
    Name = "my_dev_bucket_${random_id.bucket_suffix.hex}"
  }
}
#then because we're using "random_id" to make the bucket suffix unique, we need to create the terraform suffix resource for it to be active
#then we're going to tell terraform that our bucket suffix should be 4 bytes long
resource "random_id" "bucket_suffix" {
  byte_length = 4
}

#next we're going to create an IAM group
resource "aws_iam_group" "dev_group" {
  name = "dev"
}

#then we'll create our IAM policy for the group that will grant them permissions to whatever we want
#the policy we're making for this project will allow listing and getting objects from a specific S3 bucket
resource "aws_iam_policy" "dev_s3_policy" {
  name        = "dev_group_S3_policy"
  description = "allow get and list actions for our development bucket"
  policy = jsonencode({
    Version = "2023-11-09"
    Statement = [
      {
        Action = [
          "s3:GetObject",
          "s3:ListBucket"
        ],
        Effect = "Allow",
        Resource = [
          aws_s3_bucket.dev_bucket.arn,      #this syntax uniquely identifies our S3 bucket
          "{aws_s3_bucket.dev_bucket.arn/*}" #this syntax will specify ALL the objects within the S3 bucket, not the bucket itself.
          #Adding "/*" at the end of the bucket ARN extends the policy to apply to ALL objects within the bucket. Without the "/*", 
          #the policy would apply ONLY to the bucket itself (allowing actions like listing the bucket contents), but NOT to 
          #manipulate the objects inside it.

          #So, if your IAM policy includes "${aws_s3_bucket.dev_bucket.arn}/*", that "/*" means you are granting permissions for actions defined
          #in the policy to be executed on all objects (like files and folders) within that particular S3 bucket.
        ]
      }
    ]
  })
}

#next we're going to attach our IAM policy to our group
resource "aws_iam_group_policy_attachment" "dev_policy_attachment" {
  group      = "aws_iam_group.dev_group.name"
  policy_arn = aws_iam_policy.dev_s3_policy.arn
}

#now we'll create our IAM user
resource "aws_iam_user" "dev_user" {
  name = "developer_user"
  tags = {
    department = "developers"
  }
}

#then we'll add the user to our IAM group. here is where the user will inherit the group's S3 policy
resource "aws_iam_group_membership" "developer_membership" {
  name = "developer_membership"
  users = [
    aws_iam_user.dev_user.name
  ]
  group = aws_iam_group.dev_group.name
}
